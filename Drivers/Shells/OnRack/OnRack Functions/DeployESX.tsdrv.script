/// <param name="MAC">
/// Deploy on a host with the provided MAC address. Use either this option or the OnRackID option. 
/// </param>
/// <param name="ESX_Hostname">
/// </param>
/// <param name="ESX_IP">
/// </param>
/// <param name="ESX_Gateway">
/// </param>
/// <param name="ESX_RootPass">
/// </param>
/// <param name="ESX_Domain">
/// </param>
/// <param name="ESX_DNS1">
/// </param>
/// <param name="ESX_DNS2">
/// </param>
/// <param name="TaskID">
/// </param>
DeployESX(string MAC, string ESX_Hostname, string ESX_IP, string ESX_Gateway, string ESX_RootPass, string ESX_Domain, string ESX_DNS1, string ESX_DNS2, out string TaskID)
#region /* User defined variables */
string curlCmd = ""
string json = ""
/*Deploy on a host with the provided OnRack ID. optional. */
string OnRackID = ""
string TaskID = ""
string[,] VariableMatrix = "["", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; ]"
string ESX_Domain = ""
string ESX_Hostname = ""
string ESX_IP = ""
string ESX_Gateway = ""
string ESX_RootPass = ""
string ESX_DNS1 = ""
string ESX_DNS2 = ""
/*Deploy on a host with the provided MAC address. Use either this option or the OnRackID option. */
string MAC = ""
Session s_json
string eth = ""
Session Dll_Session
#endregion

/* Main flow/s */
{
#region /* ------ Thread Start ------ */
    /* Start (Start) */
    try
    {
        set_onrack_id()
    }
    catch (({lastError.Description} Contains "not found")) // General Handler
    {
        If step still fails: End Function with error and continue
    }
    {json} = json1()
    CleanJSON(Source1: {json}, out json: {json} /*[Create Variable]*/)
    build_curl_cmd()
    /*Path: ..\Functions\AddToLog */
    log_the_curl_cmd(Level: "Debug", LogMessage: {curlCmd}, functionName: "DeployESX")
    curl1 // (PaWExeTool)
    /*Case: check if curl returned a result*/
    if ({curl1.Result} != "")
    {
        /*Path: ..\Assets\JSON Editor */
        /*Dll: JSON Editor1*/
        {
            /* Start1 (Start) */
            /*SetSession: Set Session1*/
            Set_Session1(SessionName: {s_json}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
            /*Loads a JSON string to the library session.*/
            Load_JSON1(JSON String: {curl1.Result}, out JSON String /*[Create Variable]*/)
            
            /*Converts the given JSON values to matrix.*/
            Convert_To_Matrix1(JPath: "$.Id", Filter Columns: null, out Matrix /*[Create Variable]*/)
            
            Convert_To_Matrix1_Transform1(Matrix1: {Convert_To_Matrix1.Matrix}, out Measurement1: {TaskID})
            /*EndSession: End Session1*/
            End_Session1(SessionName: {s_json}, Action: TerminateSelfStartedSession)
        }
    }
    else
    {
        /*Error: Error1*/
        throw Error1(Name: "General", Description: "Deploy request ended with no output", End: Function)
    }
#endregion /* ------- Thread End ------- */
}

/* Functions */
set_onrack_id()
{
/* ------ Matshell code ------ */
OnRackID = Project.MACtoID(MAC,'OnRackID')
eth = Project.MACtoID(MAC,'ETH')
/* ---- Matshell code end ---- */
}
json1()
{
(((((((((((((("{
	"domain": "" + {ESX_Domain}) + "",
	"hostname": "") + {ESX_Hostname}) + "",
	"repo": "http://172.31.128.1:8080/esxi/6.0",  
	"version": "6.0",  
	"networkDevices": [    
		{
			"device": "eth0",
			"ipv4": {
				"netmask": "255.255.255.0",
				"ipAddr": "") + {ESX_IP}) + "",
				"gateway": "") + {ESX_Gateway}) + ""
			}
		}
	],  
	"rootPassword": "") + {ESX_RootPass}) + "",
	"dnsServers": [    
		"") + {ESX_DNS1}) + """) + iif((length({ESX_DNS2}) > 0))) + "
	]
}")
}
CleanJSON()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: json) */
/* Step 0 */
Search and Replace(Old Substring: """, Regular Expression: False, Ignore Case: False, New Substring: "\"", Start at index: 0, Replace all occurrences: True, Match Entire String: False)
/* Step 1 */
Search and Replace_1(Old Substring: "\s", Regular Expression: True, Ignore Case: False, New Substring: "", Start at index: 0, Replace all occurrences: True, Match Entire String: False)

/*------ Transformation Flows End ------ */
}
build_curl_cmd()
{
/* ------ Matshell code ------ */
curlCmd = '-s -k -X POST -H "Authentication-Token: '+Project.APIKey+'" -H "Content-Type: application/json" -d "'+json+'" https://'+Project.OnRackServer+'/rest/v1/ManagedSystems/Systems/'+OnRackID+'/OEM/OnRack/Actions/BootImage/ESXi'

/* ---- Matshell code end ---- */
}

Convert_To_Matrix1_Transform1()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Matrix1, Output: Measurement1) */
/* Step 0 */
Custom - Simple(Output: {input(1,0)}, Output Type: String, Output Dimension: Scalar)

/*------ Transformation Flows End ------ */
}
