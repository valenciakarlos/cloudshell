/// <param name="AllResources">
/// </param>
PopulateSystem(out string [,] AllResources)
#region /* User defined variables */
Session s_json
Session s_packageeditor
string[,] AllAttributes = "["", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; ]"
string[,] AllFamilies = "["", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; ]"
string[,] AllResources = "["", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; ]"
string[,] AllModels = "["", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; ]"
string[,] AllAttributesWriter = "["", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; ]"
double AttrRowCounter = 0
string Folder = ""
string PackagePath = ""
Session s_quali
Session s_fs
double mrow = 0
string mac = ""
double row = 0
double erow = 0
double created = 0
double exists = 0
#endregion

/* Main flow/s */
{
    try
    {
    #region /* ------ Thread Start ------ */
        /* Start (Start) */
    
        /*Group: NullMats*/
        {
            /* Start1 (Start) */
    
            {AllResources} = [;]
            {AllAttributes} = [;]
            {AllFamilies} = [;]
            {AllModels} = [;]
            {AllAttributesWriter} = [;]
            {AllAttributes} = [;]
            {Folder} = "OnRackImport"
            MatShell2()
            {PackagePath} = "c:\programdata\qualisystems\OnRackImport.zip"
        }
    
        /*Path: ..\Assets\QualiAPI */
        /*Dll: ConnectQualiAPI*/
        {
            /* Start4 (Start) */
    
            /*SetSession: Set Session1*/
            Set_Session1(SessionName: {s_quali}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
            /*Login to the Quali Server.*/
            Login1(Server Address: {Project.connectivityInfo("ServerAddress",2)}, Server Port: str2num({Project.connectivityInfo("QualiApiPort",2)}), Username: {Project.connectivityInfo("AdminUsername",2)}, Password: {Project.connectivityInfo("AdminPassword",2)}, Domain Name: "Global")
        }
    
        /*Path: ..\Assets\PackageEditor */
        /*Dll: Init*/
        {
            /* Start5 (Start) */
    
            /*SetSession: Set Session5*/
            Set_Session5(SessionName: {s_packageeditor}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
            Create1(packagePath: {PackagePath})
        }
    
        /*NOP: Handle_Building_Matrix*/
        /*Group: GetSystemsGrp*/
        {
            /* Start15 (Start) */
    
            SystemsList // (PaWExeTool)
            /*Path: ..\Assets\JSON Editor */
            /*Dll: JSON Editor1*/
            {
                /* Start2 (Start) */
    
                /*SetSession: Set Session2*/
                Set_Session2(SessionName: {s_json}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
                /*Loads a JSON string to the library session.*/
                Load_JSON1(JSON String: {SystemsList.Result}, out JSON String /*[Create Variable]*/)
                
    
                /*Converts the given JSON values to matrix.*/
                Systems(JPath: "Links.Members[*]", Filter Columns: null, out Matrix /*[Create Variable]*/)
                
                Systems_Transform1(Matrix1: {Systems.Matrix}, out Measurement1 /*[Create Variable]*/)
                /*EndSession: End Session1*/
                End_Session1(SessionName: {s_json}, Action: TerminateSelfStartedSession)
            }
    
            get_nodes // (PaWExeTool)
            /*Case: if got response*/
            if ({get_nodes.Result} != "")
            {
                /*Path: ..\Assets\JSON Editor */
                /*Dll: JSON Editor3*/
                {
                    /* Start6 (Start) */
    
                    /*SetSession: Set Session6*/
                    Set_Session6(SessionName: {s_json}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
                    /*Loads a JSON string to the library session.*/
                    Load_nodes_json(JSON String: {get_nodes.Result}, out JSON String /*[Create Variable]*/)
    
                    /*Loads a JSON string to the library session.*/
                    //Load_nodes_json_debug(JSON String: {"[{"workflows":[],"catalogs":[],"autoDiscover":false,"createdAt":"2016-02-06T01:45:17.047Z","identifiers":["2c:60:0c:98:92:c8","2c:60:0c:98:92:c9","90:e2:ba:83:5d:a4","90:e2:ba:83:5d:a5","2c:60:0c:98:9b:47","2c:60:0c:98:9b:48"],"name":"2c:60:0c:98:92:c8,2c:60:0c:98:92:c9,90:e2:ba:83:5d:a4,90:e2:ba:83:5d:a5,2c:60:0c:98:9b:47,2c:60:0c:98:9b:48","sku":"56b51180f121df5c0531a4d1","type":"compute","updatedAt":"2016-02-06T01:48:42.255Z","id":"56b5502df121df5c0531a4da"},{"workflows":[],"catalogs":[],"autoDiscover":false,"createdAt":"2016-02-06T01:44:48.974Z","identifiers":["2c:60:0c:83:f5:35","2c:60:0c:83:f5:36","90:e2:ba:83:63:4c","90:e2:ba:83:63:4d"],"name":"2c:60:0c:83:f5:35,2c:60:0c:83:f5:36,90:e2:ba:83:63:4c,90:e2:ba:83:63:4d","obmSettings":[{"config":{"host":"2c:60:0c:7b:5c:ff","password":"admin","user":"admin"},"service":"ipmi-obm-service"}],"sku":"56b51180f121df5c0531a4d2","type":"compute","updatedAt":"2016-02-08T16:04:11.339Z","id":"56b55010f121df5c0531a4d6"},{"workflows":[],"catalogs":[],"autoDiscover":true,"snmpSettings":{"host":"10.10.111.1","community":"public"},"type":"switch","name":"null","createdAt":"2016-02-08T15:02:57.623Z","updatedAt":"2016-02-08T15:03:04.276Z","id":"56b8ae21f121df5c0531a4e0"}]"}, out JSON String /*[Create Variable]*/)
                    
    
                    /*Converts the given JSON values to matrix.*/
                    Nodes(JPath: "[*]", Filter Columns: ["id", "name", "type"], out Matrix /*[Create Variable]*/)
                    
                    Nodes_Transform1(Matrix1: {Nodes.Matrix}, out MACs /*[Create Variable]*/)
                    /*EndSession: End Session5*/
                    End_Session5(SessionName: {s_json}, Action: TerminateSelfStartedSession)
                }
    
                set_mac_map_table()
            }
            else
            {
                /*Error: Error1*/
                throw Error1(Name: "OnRack", Description: "OnRack did not respond for a query about the connected nodes. Please check the firewall on the OnRack and make sure it allows incoming requests to port 8080.", End: All)
            }
        }
    
        /*Group: BuildMatrixGrp*/
        {
            /* Start14 (Start) */
    
            /*Loop: ForEachSystem*/
            Loop countrows({Systems_Transform1.Measurement1}) times
            {
                GetSystem(Source1: {Systems_Transform1.Measurement1}, out APIPath /*[Create Variable]*/)
                System // (PaWExeTool)
                /*Path: ..\Assets\JSON Editor */
                /*Dll: JSON Editor2*/
                {
                    /* Start3 (Start) */
    
                    /*SetSession: Set Session3*/
                    Set_Session3(SessionName: {s_json}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
                    /*Loads a JSON string to the library session.*/
                    Load_JSON2(JSON String: {System.Result}, out JSON String /*[Create Variable]*/)
                    
    
                    /*Converts the session JSON to XML string.*/
                    DevXML(out XML String /*[Create Variable]*/)
                    
                    DevXML_Transform1(XmlString1: {DevXML.XmlString}, out Hostname /*[Create Variable]*/, out Id /*[Create Variable]*/, out Serial /*[Create Variable]*/, out Model /*[Create Variable]*/, out IPAddress /*[Create Variable]*/, out Name /*[Create Variable]*/, out System /*[Create Variable]*/)
                }
    
                BuildAllData()
                /*NOP: NOP1*/
            }
            add_headers_and_remove_empty_rows(Source1: {AllResources}, Source2: {AllFamilies}, Source3: {AllModels}, out resources: {AllResources}, out families: {AllFamilies}, out models: {AllModels})
        }
    
        /*Path: ..\Functions\PrintMessage */
        found_resources_msg(Message: "Found "{(countrows({AllResources}) - 1)}" relevant compute resources to import", Level: "Info", functionName: "PopulateSystem")
        /*Case: if relevant resources found*/
        if (countrows({AllResources}) > 1)
        {
            /*NOP: MakeAllFams*/
            /*Group: MakeAllfamsGrp*/
            {
                /* Start11 (Start) */
    
                /*Loop: ForEachFam*/
                Loop countrows({AllFamilies}) times
                {
                    /*Path: ..\Assets\PackageEditor */
                    /*Dll: CreateFams*/
                    {
                        /* Start8 (Start) */
    
                        /*SetSession: Set Session8*/
                        Set_Session8(SessionName: {s_packageeditor}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
                        AddFamily1(familyName: {AllFamilies({ForEachFam.Index},0)}, description: "Created via OnRack", categories: null, connectable: 0, adminOnly: 0, sharedByDefault: 0, serviceFamily: 0, searchable: 1)
                    }
                }
            }
    
            /*NOP: MakeAllModels*/
            /*Group: MakeAllModelsGrp*/
            {
                /* Start13 (Start) */
    
                /*Loop: ForEachModel*/
                Loop countrows({AllModels}) times
                {
                    /*Path: ..\Assets\PackageEditor */
                    /*Dll: CreateMods*/
                    {
                        /* Start12 (Start) */
    
                        /*SetSession: Set Session9*/
                        Set_Session9(SessionName: {s_packageeditor}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
                        AddModelToFamily1(familyName: {AllModels({ForEachModel.Index},0)}, modelName: {AllModels({ForEachModel.Index},1)}, description: "Created via OnRack")
                    }
                }
            }
    
            /*NOP: MakeAllAttributes*/
            /*Group: MakeAllAttsGrp*/
            {
                /* Start17 (Start) */
    
                UniqueAtts(Source1: {AllAttributesWriter}, out UA /*[Create Variable]*/)
                /*Loop: ForEachAtt*/
                Loop length({UniqueAtts.UA}) times
                {
                    /*Path: ..\Assets\PackageEditor */
                    /*Dll: CreateAtt*/
                    {
                        /* Start16 (Start) */
    
                        /*SetSession: Set Session10*/
                        Set_Session10(SessionName: {s_packageeditor}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
                        AddOrUpdateAttribute1(attributeName: {UniqueAtts.UA({ForEachAtt.Index})}, defaultValue: null, description: "Created via onRack", attributeType: "String", lookupValues: null, rules: ["Configuration", "Setting"])
                    }
                }
            }
    
            /*NOP: AttatchAllAttributes*/
            /*Group: AttachAllAttsGrp*/
            {
                /* Start19 (Start) */
    
                Uniques(Source1: {AllAttributesWriter}, Source2: {AllFamilies}, out UA /*[Create Variable]*/, out UF /*[Create Variable]*/)
                /*Loop: ForEachAtt1*/
                Loop length({Uniques.UA}) times
                {
                    /*Loop: ForEachFam1*/
                    Loop length({Uniques.UF}) times
                    {
                        Iterator(Source1: {Uniques.UA}, Source2: {Uniques.UF}, out Att /*[Create Variable]*/, out Fam /*[Create Variable]*/)
                        /*Path: ..\Assets\PackageEditor */
                        /*Dll: AttatchAtt*/
                        {
                            /* Start20 (Start) */
    
                            /*SetSession: Set Session12*/
                            Set_Session12(SessionName: {s_packageeditor}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
                            AttachAttributeToFamily1(familyName: {Iterator.Fam}, attributeName: {Iterator.Att}, userInput: 0, allowedValues: null)
                        }
    
    
                        /*workaround on old pe*/
                        /*Path: ..\Assets\QualiAPI */
                        /*Dll: ImportPackage*/
                        // {
    //                         /* Start21 (Start) */
    // 
    //                         /*SetSession: Set Session4*/
    //                         Set_Session4(SessionName: {s_quali}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    // 
    //                         /*Import quali package.*/
    //                         Import_Package1(Package Path: {PackagePath})
    //                     }
    //
                    }
                }
            }
    
            /*NOP: MakeAllResources*/
            /*Path: ..\Functions\PrintMessage */
            importing_pack_msg(Message: "Importing package", Level: "Info", functionName: "PopulateSystem")
            /*Path: ..\Functions\PrintMessage.tsdrv */
            /*Dll: ImportPackage with datamodel*/
            {
                /* Start24 (Start) */
    
                /*SetSession: Set Session15*/
                Set_Session15(SessionName: {s_quali}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
                /*Import quali package.*/
                try
                {
                    Import_Package2(Message: "Import package failed: "{lastError.Description}, Level: "Debug", functionName: "PopulateSystem", Package Path: {PackagePath})
                }
                catch (General) // end functions
                {
                    /* Action Type: PaWRunFunction */
                    PrintMessage(Message: "Import package failed: "{lastError.Description}, Level: "Debug", functionName: "PopulateSystem")
                    If action succeeds, retry Step in 1 seconds, a maximum of 1 times
    
                    If step still fails: End Function with error and continue
                }
    
            }
    
            /*Path: ..\Functions\PrintMessage */
            creating_resources_msg(Message: "Creating resources", Level: "Info", functionName: "PopulateSystem")
            /*Group: MakeAllResGrp*/
            {
                /* Start9 (Start) */
    
                {exists} = 0
                {created} = 0
                /*Path: ..\Assets\TestShellAPI */
                /*Dll: Create folder*/
                {
                    /* Start25 (Start) */
    
                    /*SetSession: Set Session16*/
                    Set_Session16(SessionName: {Project.TSAPI_Session}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
                    /*Adds a new folder to the specified path.*/
                    CreateFolder1(Folder Full Path: {Folder})
                }
    
                /*Loop: ForEachResource*/
                Loop (countrows({AllResources}) - 1) times
                {
                    Resource(Source1: {AllResources}, out Hostname /*[Create Variable]*/, out IP /*[Create Variable]*/, out Model /*[Create Variable]*/, out Family /*[Create Variable]*/)
                    /*Path: ..\Assets\TestShellAPI */
                    /*Dll: MakeResource*/
                    {
                        /* Start23 (Start) */
    
                        /*SetSession: Set Session14*/
                        Set_Session14(SessionName: {Project.TSAPI_Session}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
                        /*Adds a new resource.*/
                        try
                        {
                            CreateResource(Resource Family: {Resource.Family}, Resource Model: {Resource.Model}, Resource Name: {Resource.Hostname}, Resource Address: {Resource.IP}, Folder Full Path: {Folder}, Parent Resource Full Path: null, Resource description: "Created via OnRack", out Resource /*[Create Variable]*/, out Attributes /*[Create Variable]*/, out Result XML /*[Create Variable]*/)
                        }
                        catch (General) // ingore error
                        {
    
                            If step still fails: End Step with error and continue
                        }
    
                    }
    
                    /*Case: if resource already exist*/
                    if ({OnError} && ({lastError.Description} == "A resource with the same name already exists"))
                    {
                        {AllResources(({ForEachResource.Index} + 1),"Exists")} = "Yes"
                        {exists} = ({exists} + 1)
                    }
                    else
                    {
                        {AllResources(({ForEachResource.Index} + 1),"Exists")} = "No"
                        {created} = ({created} + 1)
                    }
                }
            }
    
            /*Path: ..\Functions\PrintMessage */
            resources_created_msg(Message: {created}" resources created, "{exists}" resources already exists", Level: "Info", functionName: "PopulateSystem")
            /*NOP: SetAllAttributes*/
            /*Group: SetAllAttsGrp*/
            {
                /* Start10 (Start) */
    
                /*Path: ..\Assets\TestShellAPI */
                /*Dll: SetAtts*/
                {
                    /* Start7 (Start) */
    
                    /*SetSession: Set Session7*/
                    Set_Session7(SessionName: {Project.TSAPI_Session}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
                    CleanAttWr(Source1: {AllAttributesWriter}, out AAW: {AllAttributesWriter})
                    RemoveExistingResources(Source1: {AllResources}, Source2: {AllAttributesWriter}, out newResources /*[Create Variable]*/, out RelevantAttributes: {AllAttributesWriter})
                    /*Case: if any attributes to update*/
                    if (countrows({AllAttributesWriter}) > 0)
                    {
                        /*Sets new attribute values for the specified resources.*/
                        SetAttributesValues3(Resources, Attributes, and Values: {AllAttributesWriter})
                    }
                }
    
            }
    
            /*Path: ..\Assets\FileSystems */
            /*Dll: CleanUpTempFile*/
            {
                /* Start22 (Start) */
    
                /*SetSession: Set Session13*/
                Set_Session13(SessionName: {s_fs}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
    
                /*Deletes a file*/
                DeleteFile1(Path: {PackagePath})
                /*EndSession: End Session4*/
                End_Session4(SessionName: {s_fs}, Action: TerminateSelfStartedSession)
            }
        }
        else
        {
            
        }
    #endregion /* ------- Thread End ------- */
    
    
    
    #region /* ------ Finalize Start ------ */
        /* Finalize1 (Finalize) */
    
        /*EndSession: End Session2*/
        End_Session2(SessionName: {s_packageeditor}, Action: TerminateSelfStartedSession)
        /*EndSession: End Session3*/
        End_Session3(SessionName: {s_quali}, Action: TerminateSelfStartedSession)
    #endregion /* ------- Finalize End ------- */
    
    
    
    }
    catch (General) // End function if any error occurs
    {
        If step still fails: End Function with error and continue
    }
}

/* Functions */

MatShell2()
{
/* ------ Matshell code ------ */
AllAttributes(0, 0) = 'OnRackID'
AllAttributes(0, 1) = 'Model Name'
AllAttributes(0, 2) = 'Serial Number'
AllAttributes(0, 3) = 'OnRackIP'

/* ---- Matshell code end ---- */
}

Systems_Transform1()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Matrix1, Output: Measurement1) */
/* Step 0 */
Custom - Simple(Output: {input(1:end,0)}, Output Type: String, Output Dimension: Vector)

/*------ Transformation Flows End ------ */
}

Nodes_Transform1()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Matrix1, Output: MACs) */
/* Step 0 */
Table Filter(Column Header: "type", Column Header Regular Expression: False, Ignore Column Case: False, Filter Value: "compute", Action: Keep Matched, Filter Value Regular Expression: False, Ignore Filter Case: False, Return Header: True)

/*------ Transformation Flows End ------ */
}
set_mac_map_table()
{
/* ------ Matshell code ------ */
Project.MACtoID = ['MAC','OnRackID','ETH';]
for (row = 1:(countrows(Nodes_Transform1.MACs)-1))
    erow = 0
	for (mac = str2vect(Nodes_Transform1.MACs(row,'name'),','))
		mrow = countrows(Project.MACtoID)
		Project.MACtoID(mrow,'MAC') = mac
		Project.MACtoID(mrow,'OnRackID') = Nodes_Transform1.MACs(row,'id')
		Project.MACtoID(mrow,'ETH') = 'eth' + num2str(erow)
		erow += 1
	end
end
/* ---- Matshell code end ---- */
}

GetSystem()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: APIPath) */
/* Step 0 */
Custom - Simple(Output: {input({ForEachSystem.Index})}, Output Type: String, Output Dimension: Scalar)
/* Step 1 */
Custom - Simple_1(Output: (("https://" + {Project.OnRackServer}) + {input}), Output Type: String, Output Dimension: Scalar)

/*------ Transformation Flows End ------ */
}

DevXML_Transform1()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: XmlString1, Output: Hostname) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Oem/EMC/VisionID_Chassis/text()", Return: First match)
/* Step 1 */
Split(Match String: ">", Regular Expression: False, Include Match String: False, Start at index: 0, Option: After match)
/* Step 2 */
Split_1(Match String: "<", Regular Expression: False, Include Match String: False, Start at index: 0, Option: Before match)
/* Step 3 */
Search and Replace(Old Substring: ":", Regular Expression: False, Ignore Case: False, New Substring: "_", Start at index: 0, Replace all occurrences: True, Match Entire String: False)

/* Flow 1 (Input: XmlString1, Output: Id) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Id/text()", Return: First match)
/* Step 1 */
Split(Match String: ">", Regular Expression: False, Include Match String: False, Start at index: 0, Option: After match)
/* Step 2 */
Split_1(Match String: "<", Regular Expression: False, Include Match String: False, Start at index: 0, Option: Before match)

/* Flow 2 (Input: XmlString1, Output: Serial) */
/* Step 0 */
XML - Select Node(XPath: "/Root/SerialNumber/text()", Return: First match)
/* Step 1 */
Split(Match String: ">", Regular Expression: False, Include Match String: False, Start at index: 0, Option: After match)
/* Step 2 */
Split_1(Match String: "<", Regular Expression: False, Include Match String: False, Start at index: 0, Option: Before match)

/* Flow 3 (Input: XmlString1, Output: Model) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Model/text()", Return: First match)
/* Step 1 */
Split(Match String: ">", Regular Expression: False, Include Match String: False, Start at index: 0, Option: After match)
/* Step 2 */
Split_1(Match String: "<", Regular Expression: False, Include Match String: False, Start at index: 0, Option: Before match)

/* Flow 4 (Input: XmlString1, Output: IPAddress) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Oem/EMC/VisionID_Ip/text()", Return: First match)
/* Step 1 */
Split(Match String: ">", Regular Expression: False, Include Match String: False, Start at index: 0, Option: After match)
/* Step 2 */
Split_1(Match String: "<", Regular Expression: False, Include Match String: False, Start at index: 0, Option: Before match)
/* Step 3 */
Search and Replace(Old Substring: ":", Regular Expression: False, Ignore Case: False, New Substring: "_", Start at index: 0, Replace all occurrences: True, Match Entire String: False)

/* Flow 5 (Input: XmlString1, Output: Name) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Name/text()", Return: First match)
/* Step 1 */
Split(Match String: ">", Regular Expression: False, Include Match String: False, Start at index: 0, Option: After match)
/* Step 2 */
Split_1(Match String: "<", Regular Expression: False, Include Match String: False, Start at index: 0, Option: Before match)

/* Flow 6 (Input: XmlString1, Output: System) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Oem/EMC/VisionID_System/text()", Return: First match)

/*------ Transformation Flows End ------ */
}
BuildAllData()
{
/* ------ Matshell code ------ */
/* build matricies
We will make row for family/model the loop index and dedup later
only do it if there is a hostname
*/

if(length(DevXML_Transform1.Hostname) > 0)

/* +---------------------------------------------------------------------------+ */
/* | Build the list of viable families                                         |
/* +---------------------------------------------------------------------------+ */
AllFamilies(ForEachSystem.Index, 0) = 'Compute'/*DevXML_Transform1.Name*/


/* +---------------------------------------------------------------------------+ */
/* | Build the list of viable models                                           |
/* +---------------------------------------------------------------------------+ */
AllModels(ForEachSystem.Index, 0) = AllFamilies(ForEachSystem.Index, 0)
AllModels(ForEachSystem.Index, 1) = DevXML_Transform1.Model


/* +---------------------------------------------------------------------------+ */
/* | Build the list of the resources                                           |
/* +---------------------------------------------------------------------------+ */
AllResources(ForEachSystem.Index, 0) = DevXML_Transform1.Hostname
if (length(DevXML_Transform1.IPAddress) > 0)
	AllResources(ForEachSystem.Index, 1) = DevXML_Transform1.IPAddress
else
	AllResources(ForEachSystem.Index, 1) = 'Unknown'
end
AllResources(ForEachSystem.Index, 2) = AllModels(ForEachSystem.Index, 0)
AllResources(ForEachSystem.Index, 3) = AllModels(ForEachSystem.Index, 1)
AllResources(ForEachSystem.Index, 4) = DevXML_Transform1.Id
AllResources(ForEachSystem.Index, 5) = Nodes_Transform1.MACs(DevXML_Transform1.Id,'name')
AllResources(ForEachSystem.Index, 6) = DevXML_Transform1.System

/* +---------------------------------------------------------------------------+ */
/* | Build the list of attributes                                              |
/* +---------------------------------------------------------------------------+ */
AttrRowCounter = countrows(AllAttributesWriter)

AllAttributesWriter(AttrRowCounter + 1, 0) = DevXML_Transform1.System
AllAttributesWriter(AttrRowCounter + 1, 1) = 'OnRackID'
AllAttributesWriter(AttrRowCounter + 1, 2) = DevXML_Transform1.Id

AllAttributesWriter(AttrRowCounter + 2, 0) = DevXML_Transform1.System
AllAttributesWriter(AttrRowCounter + 2, 1) = 'Model Name'
AllAttributesWriter(AttrRowCounter + 2, 2) = DevXML_Transform1.Model

AllAttributesWriter(AttrRowCounter + 3, 0) = DevXML_Transform1.System
AllAttributesWriter(AttrRowCounter + 3, 1) = 'Serial Number'
AllAttributesWriter(AttrRowCounter + 3, 2) = DevXML_Transform1.Serial

AllAttributesWriter(AttrRowCounter + 4, 0) = DevXML_Transform1.System
AllAttributesWriter(AttrRowCounter + 4, 1) = 'OnRackIP'
AllAttributesWriter(AttrRowCounter + 4, 2) = Project.OnRackServer

/*AllAttributesWriter(AttrRowCounter + 4, 0) = DevXML_Transform1.Hostname
AllAttributesWriter(AttrRowCounter + 4, 1) = 'Vision IP'
AllAttributesWriter(AttrRowCounter + 4, 2) = DevXML_Transform1.IPAddress*/

end

/* ---- Matshell code end ---- */
}
add_headers_and_remove_empty_rows()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: resources) */
/* Step 0 */
Concatenate matrix/vector(Matrix/Vector: ["Hostname", "IP", "Family", "Model", "ID", "MACs", "System", "Exists"], Concatenate: Above, Treat vectors as: Row)
/* Step 1 */
Remove Empty Rows or Columns(Options: Rows)

/* Flow 1 (Input: Source2, Output: families) */
/* Step 0 */
Remove Empty Rows or Columns(Options: Rows)

/* Flow 2 (Input: Source3, Output: models) */
/* Step 0 */
Remove Empty Rows or Columns(Options: Rows)

/*------ Transformation Flows End ------ */
}

UniqueAtts()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: UA) */
/* Step 0 */
Select Columns(Columns (Vector): [1])
/* Step 1 */
Trim Whitespace(Options: TrimBoth)
/* Step 2 */
Remove Empty Rows or Columns(Options: Rows And Columns)
/* Step 3 */
Custom - Simple(Output: {input(0:end,0)}, Output Type: String, Output Dimension: Vector)
/* Step 4 */
Remove Duplicate Values(Ignore Case: False)

/*------ Transformation Flows End ------ */
}
Uniques()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: UA) */
/* Step 0 */
Select Columns(Columns (Vector): [1])
/* Step 1 */
Trim Whitespace(Options: TrimBoth)
/* Step 2 */
Remove Empty Rows or Columns(Options: Rows And Columns)
/* Step 3 */
Custom - Simple(Output: {input(0:end,0)}, Output Type: String, Output Dimension: Vector)
/* Step 4 */
Remove Duplicate Values(Ignore Case: False)

/* Flow 1 (Input: Source2, Output: UF) */
/* Step 0 */
Custom - Simple(Output: {input(0:end,0)}, Output Type: String, Output Dimension: Vector)
/* Step 1 */
Remove Duplicate Values(Ignore Case: False)

/*------ Transformation Flows End ------ */
}

Iterator()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: Att) */
/* Step 0 */
Custom - Simple(Output: {input({ForEachAtt1.Index})}, Output Type: String, Output Dimension: Scalar)

/* Flow 1 (Input: Source2, Output: Fam) */
/* Step 0 */
Custom - Simple(Output: {input({ForEachFam1.Index})}, Output Type: String, Output Dimension: Scalar)

/*------ Transformation Flows End ------ */
}

Resource()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: Hostname) */
/* Step 0 */
Custom - Simple(Output: {input(({ForEachResource.Index} + 1),"System")}, Output Type: String, Output Dimension: Scalar)

/* Flow 1 (Input: Source1, Output: IP) */
/* Step 0 */
Custom - Simple(Output: {input(({ForEachResource.Index} + 1),"IP")}, Output Type: String, Output Dimension: Scalar)

/* Flow 2 (Input: Source1, Output: Model) */
/* Step 0 */
Custom - Simple(Output: {input(({ForEachResource.Index} + 1),"Model")}, Output Type: String, Output Dimension: Scalar)

/* Flow 3 (Input: Source1, Output: Family) */
/* Step 0 */
Custom - Simple(Output: {input(({ForEachResource.Index} + 1),"Family")}, Output Type: String, Output Dimension: Scalar)

/*------ Transformation Flows End ------ */
}


CleanAttWr()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: AAW) */
/* Step 0 */
Remove Empty Rows or Columns(Options: Rows And Columns)

/*------ Transformation Flows End ------ */
}
RemoveExistingResources()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: newResources) */
/* Step 0 */
Table Filter(Column Header: "Exists", Column Header Regular Expression: False, Ignore Column Case: False, Filter Value: "Yes", Action: Remove Matched, Filter Value Regular Expression: False, Ignore Filter Case: False, Return Header: True)

/* Flow 1 (Input: Source2, Output: RelevantAttributes) */
/* Step 0 */
Table Filter By Column Index(Column Index: 0, Filter Value: vect2str({RemoveExistingResources.newResources(0:end,"System")}), Action: Keep Matched, Filter Value Regular Expression: True, Ignore Filter Case: False, Table Has Header: False, Return Header: False)

/*------ Transformation Flows End ------ */
}

