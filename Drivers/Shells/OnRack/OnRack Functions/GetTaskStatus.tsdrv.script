/// <param name="TaskID">
/// </param>
/// <param name="Status">
/// </param>
GetTaskStatus(string TaskID, out string [,] Status)
#region /* User defined variables */
string TaskID = ""
string curlCmd = ""
Session s_json
string[,] Status = "["", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; "", "", "", "", "", "", "", "", "", ""; ]"
#endregion

/* Main flow/s */
{
#region /* ------ Thread Start ------ */
    /* Start (Start) */
    MatShell1()
    {Status} = ["SystemId", ""; "TaskState", ""; "StartTime", ""; "EndTime", ""; "Id", ""; "Name", ""; ]
    curl1 // (PaWExeTool)
    /*Path: ..\Assets\JSON Editor */
    /*Dll: JSON Editor1*/
    {
        /* Start1 (Start) */
        /*SetSession: Set Session1*/
        Set_Session1(SessionName: {s_json}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
        /*Loads a JSON string to the library session.*/
        Load_JSON1(JSON String: {curl1.Result}, out JSON String /*[Create Variable]*/)
        
        /*Converts the session JSON to XML string.*/
        Convert_To_XML1(out XML String /*[Create Variable]*/)
        
        Convert_To_XML1_Transform1(XmlString1: {Convert_To_XML1.XmlString}, out SystemID: {Status("SystemId",1)}, out TaskState: {Status("TaskState",1)}, out StartTime: {Status("StartTime",1)}, out EndTime: {Status("EndTime",1)}, out TaskId: {Status("Id",1)}, out TaskName: {Status("Name",1)})
        /*EndSession: End Session1*/
        End_Session1(SessionName: {s_json}, Action: TerminateSelfStartedSession)
    }
#endregion /* ------- Thread End ------- */
}

/* Functions */
MatShell1()
{
/* ------ Matshell code ------ */
curlCmd = '-s -k -X GET -H "Authentication-Token: '+Project.APIKey+'" https://'+Project.OnRackServer+'/rest/v1/ManagedSystems/TaskService/Tasks/'+TaskID

/* ---- Matshell code end ---- */
}
Convert_To_XML1_Transform1()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: XmlString1, Output: SystemID) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Oem/SystemId/text()", Return: First match)

/* Flow 1 (Input: XmlString1, Output: TaskState) */
/* Step 0 */
XML - Select Node(XPath: "/Root/TaskState/text()", Return: First match)

/* Flow 2 (Input: XmlString1, Output: StartTime) */
/* Step 0 */
XML - Select Node(XPath: "/Root/StartTime/text()", Return: First match)

/* Flow 3 (Input: XmlString1, Output: EndTime) */
/* Step 0 */
XML - Select Node(XPath: "/Root/EndTime/text()", Return: First match)

/* Flow 4 (Input: XmlString1, Output: TaskId) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Id/text()", Return: First match)

/* Flow 5 (Input: XmlString1, Output: TaskName) */
/* Step 0 */
XML - Select Node(XPath: "/Root/Name/text()", Return: First match)

/*------ Transformation Flows End ------ */
}
