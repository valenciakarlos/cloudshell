/// <param name="resource">
/// A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.
/// </param>
/// <param name="out">
/// </param>
/// <param name="reservation">
/// A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.
/// </param>
/// <param name="connectors">
/// List of connectors that are connected to the resource
/// </param>
/// <param name="connectorsAttributes">
/// List of attributes for the connectors
/// </param>
PopulateResources(string [,] resource, out string out, string [,] reservation, string [,] connectors, string [,] connectorsAttributes)
#region /* User defined variables */
string out = ""
/*A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.*/
string[,] resource = "["ResourceName", "", ""; "ResourceFullName", "", ""; "ResourceFamily", "", ""; "ResourceModel", "", ""; "ResourceDescription", "", ""; "OnRack Address", "", ""; "OnRack Username", "", ""; "OnRack Password", "", ""; ]"
/*A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.*/
string[,] reservation = "["Username", "", ""; "Password", "", ""; "Domain", "", ""; "ReservationId", "", ""; ]"
/*List of connectors that are connected to the resource*/
string[,] connectors = "["Index", "Source", "Target", "Direction", "Alias"; ]"
/*List of attributes for the connectors*/
string[,] connectorsAttributes = "["ConnectorIndex", "Name", "Value"; ]"
string[,] AllResources = "[;]"
#endregion

/* Main flow/s */
{
    try
    {
    #region /* ------ Thread Start ------ */
        /* Start (Start) */
    
        /*NOP: Command_flow*/
        /*Path: ..\Functions\API Login */
        TS_API_Login1(reservation: {reservation})
        /*Path: ..\OnRack Functions\GetApiToken */
        GetApiToken1()
        /*Path: ..\OnRack Functions\PopulateSystem */
        PopulateSystem2(out AllResources: {AllResources})
        /*Path: ..\Functions\API Login.tsdrv */
        /*Dll: Add Resources to reservation*/
        {
            try
            {
                /* Start3 (Start) */
        
                /*SetSession: Set Session3*/
                Set_Session3(SessionName: {Project.TSAPI_Session}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
        
                /*Reserves resources to be locked.*/
                AddResourcesToReservation1(Reservation ID: {reservation("ReservationId",2)}, Resources Full Path: {AllResources(1:end,"System")}, Is Shared: "Shared", out Resource Conflicts, out Result XML)
                /*Loop: positionLoop*/
                Loop (countrows({AllResources}) - 1) times
                {
                    /*Sets the location of a specified resource in the reservation diagram.*/
                    SetReservationResourcePosition1(Reservation ID: {reservation("ReservationId",2)}, Resource Full Path: {AllResources(({positionLoop.Index} + 1),"System")}, X: 100, Y: (100 + (110 * {positionLoop.Index})))
                }
        
            }
            catch (({lastError.Description} Contains "The API was not initialized properly")) // api not connected
            {
                /* Action Type: PaWRunFunction */
                API_Login(reservation: {reservation})
                If action succeeds, retry Step in 1 seconds, a maximum of 1 times
    
                If step still fails: End Function with error and continue
            }
        }
    
    #endregion /* ------- Thread End ------- */
    
    
    
    #region /* ------ Finalize Start ------ */
        /* Finalize (Finalize) */
    
        {out} = mat2str({AllResources})
        {Project.AllResources} = {AllResources}
    #endregion /* ------- Finalize End ------- */
    
    
    
    }
    catch (General) // End test if any error occurs
    {
        If step still fails: End Function with error and continue
    }
}
