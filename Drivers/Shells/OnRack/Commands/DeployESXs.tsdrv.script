/// <param name="resource">
/// A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.
/// </param>
/// <param name="out">
/// </param>
/// <param name="reservation">
/// A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.
/// </param>
/// <param name="connectors">
/// List of connectors that are connected to the resource
/// </param>
/// <param name="connectorsAttributes">
/// List of attributes for the connectors
/// </param>
DeployESXs(string [,] resource, out string out, string [,] reservation, string [,] connectors, string [,] connectorsAttributes)
#region /* User defined variables */
string out = ""
/*A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.*/
string[,] resource = "["ResourceName", "", ""; "ResourceFullName", "", ""; "ResourceFamily", "", ""; "ResourceModel", "", ""; "ResourceDescription", "", ""; "ESX Gateway", "", ""; "ESX Domain", "", ""; "ESX DNS1", "", ""; "ESX DNS2", "", ""; "ESX Root Password", "", ""; "OnRack Address", "", ""; "OnRack Username", "", ""; "OnRack Password", "", ""; "DeployTable", "", ""; ]"
/*A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.*/
string[,] reservation = "["Username", "", ""; "Password", "", ""; "Domain", "", ""; "ReservationId", "", ""; ]"
/*List of connectors that are connected to the resource*/
string[,] connectors = "["Index", "Source", "Target", "Direction", "Alias"; ]"
/*List of attributes for the connectors*/
string[,] connectorsAttributes = "["ConnectorIndex", "Name", "Value"; ]"
double row = 0
Session OnRack_Session
string[,] AllResources = "[""; ]"
string[,] HostsInfoMatrix = "["", "", ""; ]"
string resourcename = ""
string times = ""
Session CommandShell_Session
double allresponding = 0
double hrow = 0
#endregion

/* Main flow/s */
{
    try
    {
    #region /* ------ Thread Start ------ */
        /* Start (Start) */
    
        /*NOP: Command_flow*/
        {times} = currenttime2str
        /*Case: check that populate was executed before*/
        if (countrows({Project.AllResources}) <= 1)
        {
            {out} = "Populate Resources must be executed before executing Deploy ESX"
            /*Error: Error1*/
            throw Error1(Name: "General", Description: {out}, End: Function)
            /*End: End1*/
            //End1(Action: EndBranch)
        }
        {HostsInfoMatrix} = iif(strcontains({resource("DeployTable",2)}))
        clear_hosts_matrix(Source1: {HostsInfoMatrix}, out Measurement1: {HostsInfoMatrix})
        {AllResources} = {Project.AllResources}
        {HostsInfoMatrix} = concathorizontal({HostsInfoMatrix})
        find_resource_name2()
        /*ParaLoop: ParaLoop1*/
        ParaLoop (countrows({HostsInfoMatrix}) - 2) branches
        {
            /*Path: ..\Functions\DeployAndWait */
            DeployAndWait1(resource: {resource}, ESX_Hostname: {HostsInfoMatrix((branch + 2),"Hostname")}, ESX_IP: {HostsInfoMatrix((branch + 2),"IP")}, ESX_MAC: {HostsInfoMatrix((branch + 2),"MAC")}, resourcename: {HostsInfoMatrix((branch + 2),"ResourceName")}, reservation: {reservation})
        }
        {times} = (({times} + crlf) + currenttime2str)
        /*Path: ..\Functions\PrintMessage */
        PrintMessage1(Message: "Waiting for hosts to respond", Level: "Info", functionName: "Deploy ESX")
        {HostsInfoMatrix} = concathorizontal({HostsInfoMatrix})
        /*While: while not responding*/
        do
        {
            {allresponding} = 1
            /*Loop: waitLoop1*/
            Loop (countrows({HostsInfoMatrix}) - 2) times
            {
                /*CommandShell: ping resources*/
                {
                    /* Start6 (Start) */
    
                    /*SetSession: Set Session6*/
                    Set_Session6(SessionName: {CommandShell_Session}, SessionType: PowerShell, ConnectAction: ContinueOrStartSession)
                    
                    ping_the_host(out Result /*[Create Variable]*/) // Timeout: 15 seconds
                    
                    ping_the_host_Transform1(Result1: {ping_the_host.Result}, out lossP /*[Create Variable]*/)
                    /*Case: check if host replied*/
                    if ({ping_the_host_Transform1.lossP} != 0)
                    {
                        {allresponding} = 0
                    }
                    /*EndSession: End Session1*/
                    End_Session1(SessionName: {CommandShell_Session}, Action: TerminateSelfStartedSession)
                }
    
                /*Case: compare previous status*/
                if (({ping_the_host_Transform1.lossP} == 0) && ({HostsInfoMatrix(({waitLoop1.Index} + 2),"Online")} != "Online"))
                {
                    /*Path: ..\Functions\API Login.tsdrv */
                    /*Dll: set online status*/
                    {
                        try
                        {
                            /* Start7 (Start) */
        
                            /*SetSession: Set Session7*/
                            Set_Session7(SessionName: {Project.TSAPI_Session}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
        
                            /*Sets the live status of the resource.*/
                            SetResourceLiveStatus3(Resource Full Path: {HostsInfoMatrix(({waitLoop1.Index} + 2),"ResourceName")}, Live Status Name: "Online", Additional Info: "ESX host available", out Result XML /*[Create Variable]*/)
        
                        }
                        catch (({lastError.Description} Contains "The API was not initialized properly")) // api not connected
                        {
                            /* Action Type: PaWRunFunction */
                            API_Login(reservation: {reservation})
                            If action succeeds, retry Step in 1 seconds, a maximum of 1 times
    
                            If step still fails: End Function with error and continue
                        }
                    }
    
                    {HostsInfoMatrix(({waitLoop1.Index} + 2),"Online")} = "Online"
                }
                else if (({ping_the_host_Transform1.lossP} != 0) && ({HostsInfoMatrix(({waitLoop1.Index} + 2),"Online")} != "Offline"))
                {
                    /*Path: ..\Functions\API Login.tsdrv */
                    /*Dll: set offline status*/
                    {
                        try
                        {
                            /* Start8 (Start) */
        
                            /*SetSession: Set Session8*/
                            Set_Session8(SessionName: {Project.TSAPI_Session}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
        
                            /*Sets the live status of the resource.*/
                            SetResourceLiveStatus4(Resource Full Path: {HostsInfoMatrix(({waitLoop1.Index} + 2),"ResourceName")}, Live Status Name: "Offline", Additional Info: "ESX host not available", out Result XML /*[Create Variable]*/)
        
                        }
                        catch (({lastError.Description} Contains "The API was not initialized properly")) // api not connected
                        {
                            /* Action Type: PaWRunFunction */
                            API_Login(reservation: {reservation})
                            If action succeeds, retry Step in 1 seconds, a maximum of 1 times
    
                            If step still fails: End Function with error and continue
                        }
                    }
    
                    {HostsInfoMatrix(({waitLoop1.Index} + 2),"Online")} = "Offline"
                }
                else
                {
                    
                }
            }
            Delay1(Delay: 10 seconds)
        } while ({allresponding})
        {times} = (({times} + crlf) + currenttime2str)
        /*Path: ..\Functions\PrintMessage */
        PrintMessage2(Message: "Deploy ESX done", Level: "Info", functionName: "Deploy ESX")
    #endregion /* ------- Thread End ------- */
    
    
    
    #region /* ------ Finalize Start ------ */
        /* Finalize (Finalize) */
    
    #endregion /* ------- Finalize End ------- */
    
    
    
    }
    catch (General) // End test if any error occurs
    {
        If step still fails: End Function with error and continue
    }
}

/* Functions */

clear_hosts_matrix()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Source1, Output: Measurement1) */
/* Step 0 */
Remove Empty Rows or Columns(Options: Rows And Columns)

/*------ Transformation Flows End ------ */
}
find_resource_name2()
{
/* ------ Matshell code ------ */
HostsInfoMatrix(0,countcolumns(HostsInfoMatrix)) = 'ResourceName'
for (hrow=2:(countrows(HostsInfoMatrix)-1))
	for(row=1:(countrows(AllResources)-1))
	  if (strcontains(AllResources(row,'MACs'),HostsInfoMatrix(hrow,'MAC')))
	      HostsInfoMatrix(hrow,'ResourceName') = AllResources(row,'System')
		  break
	  end
	end
end

/* ---- Matshell code end ---- */
}

ping_the_host()
{
/* ------ CommandTool ------ */
/* Command */
"ping "{HostsInfoMatrix(({waitLoop1.Index} + 2),"IP")}" -n 1"
/* Termination String */
"PS C:\> "

/* Kill command on timeout: True */
}
ping_the_host_Transform1()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: Result1, Output: lossP) */
/* Step 0 */
Regular Expression(Regular Expression: "Reply from "{HostsInfoMatrix(({waitLoop1.Index} + 2),"IP")}":", Ignore Case: False, Extract Groups: False, Start at index: 0, Return: A specific match, Match number: 1)
/* Step 1 */
Regular Expression_1(Regular Expression: "\d+", Ignore Case: False, Extract Groups: False, Start at index: 0, Return: A specific match, Match number: 1)
/* Step 2 */
Custom - Simple(Output: iif(({input} > "")), Output Type: Numeric, Output Dimension: Scalar)
/* Step 3 */
Parse Number(Read input string as: Decimal)

/*------ Transformation Flows End ------ */
}


