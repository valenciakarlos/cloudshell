/// <param name="reservation">
/// A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.
/// </param>
/// <param name="globalInputs">
/// A predefined matrix with the following columns: ParameterName, Value, PossibleValues (seperated by new lines). It contains the global inputs provided by the user for the current reservation. This input is optional.
/// </param>
/// <param name="requirementsInputs">
/// A predefined matrix with the following columns: ResourceName, ParameterName, Value, InputType. It contains the requirements inputs provided by the user for the current reservation. This input is optional.
/// </param>
/// <param name="additionalInfoInputs">
/// A predefined matrix with the following columns: ResourceName, ParameterName, Value, PossibleValues (seperated by new lines). It contains the additional info inputs provided by the user for the current reservation. This input is optional.
/// </param>
/// <param name="connectivityInfo">
/// Quali Server connectivity information. A predefined matrix with the following columns: parameter, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.
/// </param>
/// <param name="out">
/// </param>
Versa(string [,] reservation, string [,] globalInputs, string [,] requirementsInputs, string [,] additionalInfoInputs, string [,] connectivityInfo, out string out)
#region /* User defined variables */
string out = ""
/*A predefined matrix with the following columns: attribute, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.*/
string[,] reservation = "["Username", "", ""; "Password", "", ""; "Domain", "", ""; "ReservationId", "", ""; "TopologyPath", "", ""; ]"
/*A predefined matrix with the following columns: ResourceName, ParameterName, Value, PossibleValues (seperated by new lines). It contains the additional info inputs provided by the user for the current reservation. This input is optional.*/
string[,] additionalInfoInputs = "["ResourceName", "ParameterName", "Value", "PossibleValues"; ]"
/*A predefined matrix with the following columns: ParameterName, Value, PossibleValues (seperated by new lines). It contains the global inputs provided by the user for the current reservation. This input is optional.*/
string[,] globalInputs = "["ParameterName", "Value", "PossibleValues"; ]"
/*A predefined matrix with the following columns: ResourceName, ParameterName, Value, InputType. It contains the requirements inputs provided by the user for the current reservation. This input is optional.*/
string[,] requirementsInputs = "["ResourceName", "ParameterName", "Value", "InputType"; ]"
/*Quali Server connectivity information. A predefined matrix with the following columns: parameter, mandatory / optional (empty is mandatory), value - this column will be automatically populated when executing the command.*/
string[,] connectivityInfo = "["ServerAddress", "", ""; "TestShellApiPort", "", ""; "QualiApiPort", "", ""; ]"
string versaservice = ""
#endregion

/* Main flow/s */
{
    try
    {
    #region /* ------ Thread Start ------ */
        /* Start (Start) */
    
        /*NOP: Command_flow*/
        init_variables()
        /*Path: ..\Assets\TestShellAPI */
        /*Dll: get reservation details*/
        {
            /* Start2 (Start) */
    
            /*SetSession: Set Session2*/
            Set_Session2(SessionName: {Project.TSAPI_Session}, SessionType: Dll, ConnectAction: ContinueOrStartSession, ExecutionFolder: SessionExecutionFolder, RuntimeVersion: Default, HostType: Out)
            
    
            /*Retrieves all details and parameters for a specified reservation, including its resources, routes and route segments, topologies, and reservation conflicts.*/
            GetReservationDetails1(Reservation ID: {reservation("ReservationId",2)}, out Reservation Name, out Description, out Start Date Time, out End Date Time, out Reservation Status, out Provisioning Status, out Resources, out Resource Conflicts, out Topologies, out Topology Resources, out Route, out Segments, out Instructions, out Connected Routes, out Connected Routes Segments, out Reservation Routes, out Reservation Route Segments, out Permitted Users, out Domain Name, out Topology Resources Attributes, out Connectors, out ConnectorAttributes, out Reservations Live Status, out Services /*[Create Variable]*/, out Service Attributes, out Result XML)
            
            try
            {
                GetReservationDetails1_Transform1(services1: {GetReservationDetails1.services}, out vcenterservice: {versaservice})
            }
            catch (General) // ignore error
            {
    
                If step still fails: End Step and continue
            }
    
        }
    
        /*Case: if service was found*/
        if ({versaservice} != "")
        {
            /*Path: ..\Functions\ExecuteCommand */
            Deploy_Versa_Director(Target: {versaservice}, TargetType: "Service", CommandName: "versa_01_deploy_director", CommandInputs: null, PrintOutput: "No", out out)
            /*Path: ..\Functions\ExecuteCommand */
            Deploy_Versa_Analytics(Target: {versaservice}, TargetType: "Service", CommandName: "versa_02_deploy_analytics", CommandInputs: null, PrintOutput: "No", out out)
            /*Path: ..\Functions\ExecuteCommand */
            Deploy_Versa_Controller(Target: {versaservice}, TargetType: "Service", CommandName: "versa_03_deploy_controller", CommandInputs: null, PrintOutput: "No", out out)
            /*Path: ..\Functions\ExecuteCommand */
            Deploy_Versa_Branch_1(Target: {versaservice}, TargetType: "Service", CommandName: "versa_04_deploy_branch1", CommandInputs: null, PrintOutput: "No", out out)
            /*Path: ..\Functions\ExecuteCommand */
            Deploy_Versa_Branch_2(Target: {versaservice}, TargetType: "Service", CommandName: "versa_05_deploy_branch2", CommandInputs: null, PrintOutput: "No", out out)
            /*Path: ..\Functions\DelayWithMessage */
            WaitForFirstboot(Message: "Waiting for Versa to finish rebooting", Delay: 100)
            /*Path: ..\Functions\ExecuteCommand */
            configure0(Target: {versaservice}, TargetType: "Service", CommandName: "versa_06_post_deployment_configurations", CommandInputs: null, PrintOutput: "No", out out)
            Delay9(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure1(Target: {versaservice}, TargetType: "Service", CommandName: "versa_07_organization_administration", CommandInputs: null, PrintOutput: "No", out out)
            Delay1(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure2(Target: {versaservice}, TargetType: "Service", CommandName: "versa_08_create_controller", CommandInputs: null, PrintOutput: "No", out out)
            Delay2(Delay: 45 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure3(Target: {versaservice}, TargetType: "Service", CommandName: "versa_09_controller_administration", CommandInputs: null, PrintOutput: "No", out out)
            Delay3(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure4(Target: {versaservice}, TargetType: "Service", CommandName: "versa_10_organization_configurations", CommandInputs: null, PrintOutput: "No", out out)
            Delay4(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure5(Target: {versaservice}, TargetType: "Service", CommandName: "versa_11_create_analytics", CommandInputs: null, PrintOutput: "No", out out)
            Delay5(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure6(Target: {versaservice}, TargetType: "Service", CommandName: "versa_12_ipsec_profiles", CommandInputs: null, PrintOutput: "No", out out)
            Delay6(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure7(Target: {versaservice}, TargetType: "Service", CommandName: "versa_13_bracnh_administration", CommandInputs: null, PrintOutput: "No", out out)
            Delay7(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure8(Target: {versaservice}, TargetType: "Service", CommandName: "versa_14_template_configurations_1", CommandInputs: null, PrintOutput: "No", out out)
            Delay8(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure9(Target: {versaservice}, TargetType: "Service", CommandName: "versa_15_template_configurations_2", CommandInputs: null, PrintOutput: "No", out out)
            Delay10(Delay: 5 seconds)
            /*Path: ..\Functions\ExecuteCommand */
            configure10(Target: {versaservice}, TargetType: "Service", CommandName: "versa_16_branches_startup_configurations", CommandInputs: null, PrintOutput: "No", out out)
            /*Path: ..\Functions\DelayWithMessage */
            DelayWithMessage1(Message: "Finished Versa configurations, waiting for Versa Director to configure the Branches...", Delay: 20)
        }
        else
        {
            
        }
    #endregion /* ------- Thread End ------- */
    
    
    
    #region /* ------ Finalize Start ------ */
        /* Finalize1 (Finalize) */
    
        {out} = "success"
    #endregion /* ------- Finalize End ------- */
    
    
    
    }
    catch (({lastError.Description} Contains "The API was not initialized properly and must be initialized")) // api not initialized
    {
        /* Action Type: PaWRunFunction */
        API_Login(reservation: {reservation})
        If action succeeds, retry Step in 1 seconds, a maximum of 1 times
        If step still fails: End Step with error and continue
    }
    catch (General) // End test if any error occurs
    {
        If step still fails: End Function with error and continue
    }
}

/* Functions */
init_variables()
{
/* ------ Matshell code ------ */
Project.connectivityInfo = connectivityInfo
Project.ReservationId = reservation('ReservationId',2)

/* ---- Matshell code end ---- */
}
GetReservationDetails1_Transform1()
{
/* ------ Transformation Flows ------ */
/* Flow 0 (Input: services1, Output: vcenterservice) */
/* Step 0 */
Table Filter(Column Header: "ServiceName", Column Header Regular Expression: False, Ignore Column Case: False, Filter Value: "Versa Director", Action: Keep Matched, Filter Value Regular Expression: False, Ignore Filter Case: False, Return Header: True)
/* Step 1 */
Custom - Simple(Output: {input(1,"Alias")}, Output Type: String, Output Dimension: Scalar)

/*------ Transformation Flows End ------ */
}

